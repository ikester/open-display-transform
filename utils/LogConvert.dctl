/* LogConvert
    ------------------
    Converts from linear to log and back.

*/

DEFINE_UI_PARAMS(curve, curve, DCTLUI_COMBO_BOX, 0, {acescc, acescct, arri_logc3, arri_logc4, blackmagic_filmgen5, canon_clog2, canon_clog3, dji_dlog, fujifilm_flog, fujifilm_flog2, gopro_protune, leica_llog, nikon_nlog, panasonic_vlog, red_log3g10, sony_slog2, sony_slog3, davinci_intermediate, filmlight_tlog, kodak_cineon}, {ACEScc, ACEScct, Arri LogC3, Arri LogC4, Blackmagic Film Gen5, Canon CLog2, Canon CLog3, DJI DLog, Fujifilm FLog, Fujifilm FLog2, GoPro ProTune, Leica LLog, Nikon NLog, Panasonic VLog, Red Log3G10, Sony SLog2, Sony SLog3, DaVinci Intermediate, Filmlight TLog, Kodak Cineon})
DEFINE_UI_PARAMS(invert, invert, DCTLUI_CHECK_BOX, 0);


__DEVICE__ float oetf_acescc(float x, int inv) {
  /* ACEScc Log
      S-2014-003 : ACEScc - A Quasi-Logarithmic Encoding of ACES Data for use within Color Grading Systems
      http://j.mp/S-2014-003
  */
  const float A = 9.72f;
  const float B = 17.52f;

  if (inv == 1) {
    return x <= (A - 15.0f)/B ? (_powf(2.0f, x*B - A) - _powf(2.0f, -16.0f))*2.0f : x < (_log2f(65504.0f) + A)/B ? _powf(2.0f, x*B - A) : x;
  } else {
    return x <= 0.0f ? (_log2f(-16.0f) + A)/B : x < _powf(2.0f, -15.0f) ? (_log2f(_powf(2.0f, -16.0f) + x/2.0f) + A)/B : (_log2f(x) + A)/B;
  }
}


__DEVICE__ float oetf_acescct(float x, int inv) {
  /*  ACEScct Log
        S-2016-001 : ACEScct - A Quasi-Logarithmic Encoding of ACES Data for use within Color Grading Systems
        http://j.mp/S-2016-001_
  */
  const float cut1 = 0.0078125f;
  const float cut2 = 0.155251141552511f;
  const float A = 10.5402377416545f;
  const float B = 0.0729055341958355f;
  const float C = 9.72f;
  const float D = 17.52f;

  if (inv == 1) {
    return x <= cut2 ? (x - B)/A : _exp2f(x*D - C);
  } else {
    return x <= cut1 ? A*x + B : (_log2f(x) + C)/D;
  }
}

__DEVICE__ float oetf_arri_logc3(float x, int inv) {
  /* Arri Alexa LogC3 
      Formerly known as Alexa V3LogC EI800
      https://www.arri.com/resource/blob/31918/66f56e6abb6e5b6553929edf9aa7483e/2017-03-alexa-logc-curve-in-vfx-data.pdf
  */

  const float cut = 0.010591f;
  const float a = 5.555556f;
  const float b = 0.052272f;
  const float c = 0.247190f;
  const float d = 0.385537f;
  const float e = 5.367655f;
  const float f = 0.092809f;

  if (inv == 1) {
    return x < e*cut + f ? (x - f)/e : (_exp10f((x - d)/c) - b)/a;
  } else {
    return x < cut ? e*x + f : c*_log10f(a*x + b) + d;
  }
}

__DEVICE__ float oetf_arri_logc4(float x, int inv) {
  /* Arri Alexa LogC4
      https://www.arri.com/resource/blob/278790/bea879ac0d041a925bed27a096ab3ec2/2022-05-arri-logc4-specification-data.pdf
  */
  
  const float a = (_exp2f(18.0f) - 16.0f)/117.45f;
  const float b = (1023.0f - 95.0f)/1023.0f;
  const float c = 95.0f/1023.0f;
  const float s = (7.0f*_logf(2.0f)*_exp2f(7.0f - 14.0f*c/b))/(a*b);
  const float t = (_exp2f(14.0f*(-c/b) + 6.0f) - 64.0f)/a;

  if (inv == 1) {
    return x < t ? x*s + t : (_exp2f(14.0f*(x - c)/b + 6.0f) - 64.0f)/a;
  } else {
    return x < t ? (x - t)/s : (_log2f(a*x + 64.0f) - 6.0f)/14.0f*b + c;
  }
}

__DEVICE__ float oetf_blackmagic_filmgen5(float x, int inv) {
  /* Blackmagic Film Generation 5
      Specified in the Blackmagic Generation 5 Color Science whitepaper included in the Blackmagic Raw SDK available here
      https://www.blackmagicdesign.com/support/download/1bad3dc74c2c4a908ce5c9ce8b9f74f8/Linux
      At this path in the installer:
      /usr/lib64/blackmagic/BlackmagicRAWSDK/Documents/Blackmagic Generation 5 Color Science Technical Reference.pdf
  */

  const float A = 0.08692876065491224f;
  const float B = 0.005494072432257808f;
  const float C = 0.5300133392291939f;
  const float D = 8.283605932402494f;
  const float E = 0.09246575342465753f;
  const float LIN_CUT = 0.005f;
  const float LOG_CUT = D * LIN_CUT + E;
  
  if (inv == 1) {
    return x < LOG_CUT ? (x - E)/D : _expf((x - C)/A) - B;
  } else {
    return x < LIN_CUT ? D*x + E : A*_logf(x + B) + C;
  }
}

__DEVICE__ float oetf_canon_clog2(float x, int inv) {
  /* Canon CLog2
      CLog2 is intended for grading workflows, whereas CLog3 is intended for a more "direct to display" workflow.
      
      Canon log transfer functions are all described in this whitepaper:
      https://downloads.canon.com/nw/learn/white-papers/cinema-eos/white-paper-canon-log-gamma-curves.pdf

      The log transfer functions described above match the 1D LUTs available in the "Canon lookup table Version 201911" 
      download available here
      https://www.usa.canon.com/internet/portal/us/home/support/details/cameras/cinema-eos/cinema-eos-c500-mark-ii?tab=drivers_downloads

      However in the CTL ACES IDT provided in the "Input Transform Version 202007 for EOS C500 Mark II" file 
      at the above url, they add the /=0.9 on the scene-linear values. This function matches the IDT.
  */
  const float c0 = 0.092864125f;
  const float c1 = 0.24136077f;
  const float c2 = 87.099375f;
  
  if (inv == 1) {
    x = x < c0 ? -(_exp10f((c0 - x)/c1) - 1.0f)/c2 : (_exp10f((x - c0)/c1) - 1.0f)/c2;
    return x*0.9f;
  } else {
    x /= 0.9f;
    return x < 0.0f ? -c1*_log10f(1.0f - c2*x) + c0 : c1*_log10f(c2*x + 1.0f) + c0;
  }
}

__DEVICE__ float oetf_canon_clog3(float x, int inv) {
  /* Canon CLog3
      Warning: CLog3 is intended for a more "direct to display" workflow
  */
  const float sp0 = 0.014f;
  const float sp1 = 0.09746547f;
  const float sp2 = 0.15277891f;
  const float c0 = 0.36726845f;
  const float c1 = 14.98325f;
  const float c2 = 0.12783901f;
  const float c3 = 1.9754798f;
  const float c4 = 0.12512219f;
  const float c5 = 0.12240537f;

  if (inv == 1) {
    x = x < sp1 ? -(_exp10f((c2 - x)/c0) - 1.0f)/c1 : x <= sp2 ? (x - c4)/c3 : (_exp10f((x - c5)/c0) - 1.0f)/c1;
    return x*0.9f;
  } else {
    x /= 0.9f;
    return x < -sp0 ? -c0*_log10f(1.0f - c1*x) + c2 : x <= sp0 ? c3*x + c4 : c0*_log10f(c1*x + 1.0f) + c5;
  }
}

__DEVICE__ float oetf_dji_dlog(float x, int inv) {
  /* DJI D-Log
      https://dl.djicdn.com/downloads/zenmuse+x7/20171010/D-Log_D-Gamut_Whitepaper.pdf
  */

  if (inv == 1) {
    return x <= 0.14f ? (x - 0.0929f)/6.025f : (_exp10f((3.89616f*x - 2.27752f)) - 0.0108f)/0.9892f;
  } else {
    return x <= 0.0078f ? 6.025f*x + 0.0929f : (_log10f(x*0.9892f + 0.0108f))*0.256663f + 0.584555f;
  }
}

__DEVICE__ float oetf_fujifilm_flog(float x, int inv) {
  /* Fujifilm F-Log
      https://dl.fujifilm-x.com/support/lut/F-Log_DataSheet_E_Ver.1.0.pdf
  */
  const float a = 0.555556f;
  const float b = 0.009468f;
  const float c = 0.344676f;
  const float d = 0.790453f;
  const float e = 8.735631f;
  const float f = 0.092864f;
  const float cut1 = 0.00089f;
  const float cut2 = 0.1005377752f;

  if (inv == 1) {
    return x < cut2 ? (x-f)/e : (_exp10f(((x - d)/c))/a - b/a);
  } else {
    return x < cut1 ? e*x+f : c*_log10f(a*x + b) + d;
  }
}

__DEVICE__ float oetf_fujifilm_flog2(float x, int inv) {
  /* Fujifilm F-Log2
      https://dl.fujifilm-x.com/support/lut/F-Log2_DataSheet_E_Ver.1.0.pdf
  */
  const float a = 5.555556f;
  const float b = 0.064829f;
  const float c = 0.245281f;
  const float d = 0.384316f;
  const float e = 8.799461f;
  const float f = 0.092864f;
  const float cut1 = 0.000889f;
  const float cut2 = 0.100686685370811f;

  if (inv == 1) {
    return x < cut2 ? (x-f)/e : (_exp10f(((x - d)/c))/a - b/a);
  } else {
    return x < cut1 ? e*x+f : c*_log10f(a*x + b) + d;
  }
}

__DEVICE__ float oetf_gopro_protune(float x, int inv) {
  /* GoPro Protune Flat log curve
      Unable to find whitepaper on this but it is described in this file from the original HPD opencolorio ACES config:
      https://github.com/hpd/OpenColorIO-Configs/blob/master/aces_1.0.3/python/aces_ocio/colorspaces/gopro.py
  */
  if (inv == 1) {
    return (_powf(113.0f, x) - 1.0f)/112.0f;
  } else {
    return _logf(x*112.0f + 1.0f)/_logf(113.0f);
  }
}

__DEVICE__ float oetf_leica_llog(float x, int inv) {
  /* Leica L-Log
      https://leica-camera.com/sites/default/files/pm-65977-210914__L-Log_Reference_Manual_EN.pdf
  */
  const float a = 8.0f;
  const float b = 0.09f;
  const float c = 0.27f;
  const float d = 1.3f;
  const float e = 0.0115f;
  const float f = 0.6f;
  const float c0 = 0.006f;
  const float c1 = 0.138f;

  if (inv == 1) {
    return x < c1 ? (x - b)/a : (_exp10f((x - f)/c) - e)/d;
  } else {
    return x < c0 ? a*x + b : c*_log10f(d*x + e) + f;
  }
}

__DEVICE__ float oetf_nikon_nlog(float x, int inv) {
  /* Nikon N-Log
      http://download.nikonimglib.com/archive3/hDCmK00m9JDI03RPruD74xpoU905/N-Log_Specification_(En)01.pdf
  */
  const float a = 619.0f/1023.0f;
  const float b = 150.0f/1023.0f;
  const float c = 650.0f/1023.0f;
  const float d = 0.0075f;
  const float c0 = 452.0f/1023.0f;
  const float c1 = 0.328f;
  
  if (inv == 1) {
    return x > c0 ? _expf((x - a)/b) : _powf(x/c, 3.0f) - d;
  } else {
    return x > c1 ? b*_logf(x) + a : c*_powf(x + d, 1.0f/3.0f);
  }
}

__DEVICE__ float oetf_panasonic_vlog(float x, int inv) {
  /* Panasonic V-Log
      https://pro-av.panasonic.net/en/cinema_camera_varicam_eva/support/pdf/VARICAM_V-Log_V-Gamut.pdf
  */
  const float cut1 = 0.01f;
  const float cut2 = 0.181f;
  const float b = 0.00873f;
  const float c = 0.241514f;
  const float d = 0.598206f;

  if (inv == 1) {
    return x < cut2 ? (x - 0.125f)/5.6f : _exp10f((x - d)/c) - b;
  } else {
    return x < cut1 ? 5.6f*x + 0.125f : c*_log10f(x + b) + d;
  }
}

__DEVICE__ float oetf_red_log3g10(float x, int inv) {
  /* Red Log3G10
      https://docs.red.com/955-0187/PDF/915-0187%20Rev-C%20%20%20RED%20OPS,%20White%20Paper%20on%20REDWideGamutRGB%20and%20Log3G10.pdf
  */
  const float a = 0.224282f;
  const float b = 155.975327f;
  const float c = 0.01f;
  const float g = 15.1927f;

  if (inv == 1) {
    return x < 0.0f ? (x/g) - c : (_exp10f(x/a) - 1.0f)/b - c;
  } else {
    return x < -c ? (x + c)*g : a*_log10f((x + c)*b + 1.0f);
  }
}

__DEVICE__ float oetf_sony_slog2(float x, int inv) {
  /* Sony S-Log2
      from the pdf originally retrieved from :
      https://pro.sony/ue_US/?sonyref=pro.sony.com/bbsccms/assets/files/micro/dmpc/training/S-Log2_Technical_PaperV1_0.pdf
      Link is down, here is a mirror:
      https://mega.nz/file/e6hDxC5b#YaRzePfGFFPkx_hRtmqw2gTT0NIPuzlJycwCP38H720
  */
  const float c0 = 0.432699f;
  const float c1 = 155.0f;
  const float c2 = 219.0f;
  const float c3 = 0.037584f;
  const float c4 = 0.616596f;
  const float c5 = 0.03f;
  const float c6 = 3.53881278538813f;
  const float c7 = 0.030001222851889303f;
  
  if (inv == 1) {
    x = (x - 64.0f/1023.0f)/(876.0f/1023.0f);
    x = x < c7 ? (x - c7)/c6 : c2*(_exp10f((x - c4 - c5)/c0) - c3)/c1;
    return x*0.9f;
  } else {
    x /= 0.9f;
    x = x < 0.0f ? x*c6 + c7 : (c0*_log10f(c1*x/c2 + c3) + c4) + c5;
    return x*(876.0f/1023.0f) + 64.0f/1023.0f;
  }
}

__DEVICE__ float oetf_sony_slog3(float x, int inv) {
  /* Sony S-Log3
      https://pro.sony/s3/cms-static-content/uploadfile/06/1237494271406.pdf
  */
  const float a = 0.01125f;
  const float b = 420.0f;
  const float c = 261.5f;
  const float d = 171.2102946929f;
  const float e = 95.0f;
  const float f = 0.18f;
  const float o = 0.01f;
  
  if (inv == 1) {
    return x < d/1023.0f ? (x*1023.0f - e)*a/(d-e) : (_exp10f(((x*1023.0f - b)/c))*(f + o) - o);
  } else {
    return x < a ? (x*(d - e)/a + e)/1023.0f : (b + _log10f((x + o)/(f + o))*c)/1023.0f;
  }
}

__DEVICE__ float oetf_davinci_intermediate(float x, int inv) {
  /* DaVinci Intermediate Log
      https://documents.blackmagicdesign.com/InformationNotes/DaVinci_Resolve_17_Wide_Gamut_Intermediate.pdf
  */

  const float A = 0.0075f;
  const float B = 7.0f;
  const float C = 0.07329248f;
  const float M = 10.44426855f;
  const float LIN_CUT = 0.00262409f;
  const float LOG_CUT = 0.02740668f;
  
  if (inv == 1) {
    return x <= LOG_CUT ? x/M : _exp2f(x/C - B) - A;
  } else {
    return x <= LIN_CUT ? x*M : (_log2f(x + A) + B)*C;
  }
}

__DEVICE__ float oetf_filmlight_tlog(float x, int inv) {
  /* Filmlight T-Log
      Specified in the flspace file included with the Baselight software
      /etc/colourspaces/FilmLight_TLog_EGamut.flspace
  */
  
  const float o = 0.075f;
  const float A = 0.5520126568606655f;
  const float B = 0.09232902596577353f;
  const float C = 0.0057048244042473785f;
  const float G = 16.184376489665897f;
  
  if (inv == 1) {
    return x < o ? (x-o)/G : _expf((x - A)/B) - C;
  } else {
    return x < 0.0f ? G*x + o : _logf(x + C)*B + A;
  }
}

__DEVICE__ float oetf_kodak_cineon(float x, int inv) {
  /* Kodak Cineon Log
      https://github.com/imageworks/OpenColorIO-Configs/blob/master/nuke-default/make.py
  */
  const float a = 685.0f;
  const float b = 300.0f;
  const float c = 95.0f;
  const float off = _exp10f((c - a)/b);

  if (inv == 1) {
    return (_exp10f(((1023.0f*x - a)/b)) - off)/(1.0f - off);
  } else {
    return (a + b*_log10f(x*(1.0f - off) + off))/1023.0f;
  }
}

// __DEVICE__ float oetf_(float x, int inv) {
//   /*
//
//   */
//   if (inv == 1) {
//     return x;
//   } else {
//     return x;
//   }
// }

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{

  float3 rgb = make_float3(p_R, p_G, p_B);

  if (curve == acescc) {
    rgb.x = oetf_acescc(rgb.x, invert);
    rgb.y = oetf_acescc(rgb.y, invert);
    rgb.z = oetf_acescc(rgb.z, invert);
  } else if (curve == acescct) {
    rgb.x = oetf_acescct(rgb.x, invert);
    rgb.y = oetf_acescct(rgb.y, invert);
    rgb.z = oetf_acescct(rgb.z, invert);
  } else if (curve == arri_logc3) {
    rgb.x = oetf_arri_logc3(rgb.x, invert);
    rgb.y = oetf_arri_logc3(rgb.y, invert);
    rgb.z = oetf_arri_logc3(rgb.z, invert);
  } else if (curve == arri_logc4) {
    rgb.x = oetf_arri_logc4(rgb.x, invert);
    rgb.y = oetf_arri_logc4(rgb.y, invert);
    rgb.z = oetf_arri_logc4(rgb.z, invert);
  } else if (curve == blackmagic_filmgen5) {
    rgb.x = oetf_blackmagic_filmgen5(rgb.x, invert);
    rgb.y = oetf_blackmagic_filmgen5(rgb.y, invert);
    rgb.z = oetf_blackmagic_filmgen5(rgb.z, invert);
  } else if (curve == canon_clog2) {
    rgb.x = oetf_canon_clog2(rgb.x, invert);
    rgb.y = oetf_canon_clog2(rgb.y, invert);
    rgb.z = oetf_canon_clog2(rgb.z, invert);
  } else if (curve == canon_clog3) {
    rgb.x = oetf_canon_clog3(rgb.x, invert);
    rgb.y = oetf_canon_clog3(rgb.y, invert);
    rgb.z = oetf_canon_clog3(rgb.z, invert);
  } else if (curve == dji_dlog) {
    rgb.x = oetf_dji_dlog(rgb.x, invert);
    rgb.y = oetf_dji_dlog(rgb.y, invert);
    rgb.z = oetf_dji_dlog(rgb.z, invert);
  } else if (curve == fujifilm_flog) {
    rgb.x = oetf_fujifilm_flog(rgb.x, invert);
    rgb.y = oetf_fujifilm_flog(rgb.y, invert);
    rgb.z = oetf_fujifilm_flog(rgb.z, invert);
  } else if (curve == fujifilm_flog2) {
    rgb.x = oetf_fujifilm_flog2(rgb.x, invert);
    rgb.y = oetf_fujifilm_flog2(rgb.y, invert);
    rgb.z = oetf_fujifilm_flog2(rgb.z, invert);
  } else if (curve == gopro_protune) {
    rgb.x = oetf_gopro_protune(rgb.x, invert);
    rgb.y = oetf_gopro_protune(rgb.y, invert);
    rgb.z = oetf_gopro_protune(rgb.z, invert);
  } else if (curve == leica_llog) {
    rgb.x = oetf_leica_llog(rgb.x, invert);
    rgb.y = oetf_leica_llog(rgb.y, invert);
    rgb.z = oetf_leica_llog(rgb.z, invert);
  } else if (curve == nikon_nlog) {
    rgb.x = oetf_nikon_nlog(rgb.x, invert);
    rgb.y = oetf_nikon_nlog(rgb.y, invert);
    rgb.z = oetf_nikon_nlog(rgb.z, invert);
  } else if (curve == panasonic_vlog) {
    rgb.x = oetf_panasonic_vlog(rgb.x, invert);
    rgb.y = oetf_panasonic_vlog(rgb.y, invert);
    rgb.z = oetf_panasonic_vlog(rgb.z, invert);
  } else if (curve == red_log3g10) {
    rgb.x = oetf_red_log3g10(rgb.x, invert);
    rgb.y = oetf_red_log3g10(rgb.y, invert);
    rgb.z = oetf_red_log3g10(rgb.z, invert);
  } else if (curve == sony_slog2) {
    rgb.x = oetf_sony_slog2(rgb.x, invert);
    rgb.y = oetf_sony_slog2(rgb.y, invert);
    rgb.z = oetf_sony_slog2(rgb.z, invert);
  } else if (curve == sony_slog3) {
    rgb.x = oetf_sony_slog3(rgb.x, invert);
    rgb.y = oetf_sony_slog3(rgb.y, invert);
    rgb.z = oetf_sony_slog3(rgb.z, invert);
  } else if (curve == davinci_intermediate) {
    rgb.x = oetf_davinci_intermediate(rgb.x, invert);
    rgb.y = oetf_davinci_intermediate(rgb.y, invert);
    rgb.z = oetf_davinci_intermediate(rgb.z, invert);
  } else if (curve == filmlight_tlog) {
    rgb.x = oetf_filmlight_tlog(rgb.x, invert);
    rgb.y = oetf_filmlight_tlog(rgb.y, invert);
    rgb.z = oetf_filmlight_tlog(rgb.z, invert);
  } else if (curve == kodak_cineon) {
    rgb.x = oetf_kodak_cineon(rgb.x, invert);
    rgb.y = oetf_kodak_cineon(rgb.y, invert);
    rgb.z = oetf_kodak_cineon(rgb.z, invert);
  }

  return rgb;
  
}